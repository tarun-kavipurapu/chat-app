// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: chat.sql

package db

import (
	"context"
)

const getMessages = `-- name: GetMessages :many
SELECT id, from_user_id, to_user_id, is_sent, content, created_at FROM message
WHERE from_user_id = $1
AND to_user_id = $2
`

type GetMessagesParams struct {
	FromUserID int64 `json:"from_user_id"`
	ToUserID   int64 `json:"to_user_id"`
}

func (q *Queries) GetMessages(ctx context.Context, arg GetMessagesParams) ([]Message, error) {
	rows, err := q.db.Query(ctx, getMessages, arg.FromUserID, arg.ToUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Message{}
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.FromUserID,
			&i.ToUserID,
			&i.IsSent,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertMessage = `-- name: InsertMessage :one
INSERT INTO message (from_user_id, to_user_id, is_sent, content)
VALUES ($1, $2, $3, $4)
RETURNING id, from_user_id, to_user_id, is_sent, content, created_at
`

type InsertMessageParams struct {
	FromUserID int64  `json:"from_user_id"`
	ToUserID   int64  `json:"to_user_id"`
	IsSent     bool   `json:"is_sent"`
	Content    string `json:"content"`
}

func (q *Queries) InsertMessage(ctx context.Context, arg InsertMessageParams) (Message, error) {
	row := q.db.QueryRow(ctx, insertMessage,
		arg.FromUserID,
		arg.ToUserID,
		arg.IsSent,
		arg.Content,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.FromUserID,
		&i.ToUserID,
		&i.IsSent,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}
